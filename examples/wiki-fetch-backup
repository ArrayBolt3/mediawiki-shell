#!/bin/bash

missing_variable() {
   echo "$0: ERROR: missing variable '$1'!"
   exit 1
}

echo "$0: START"

set -e
cd ..

[[ -v WIKI_API ]] || WIKI_URL="invalid.tld"
source common

## These variables should be set by the calling script as environment variables.
[[ -v SOURCE_WIKI_URL ]] || missing_variable SOURCE_WIKI_URL
[[ -v wiki_backup_folder ]] || missing_variable wiki_backup_folder

## example:
# [[ -v SOURCE_WIKI_URL ]] || SOURCE_WIKI_URL='https://www.whonix.org'
# [[ -v wiki_backup_folder ]] || wiki_backup_folder="/tmp/whonix-wiki-backup"

[[ -v wiki_target_api ]] || wiki_target_api="${SOURCE_WIKI_URL}/${WIKI_SCRIPT_FOLDER}/api.php"

## https://www.mediawiki.org/wiki/Manual:Namespace
[[ -v wiki_namespace_list ]] || wiki_namespace_list="0 2 4 6 8 10 12 14"

rm -f "$TMPFOLDER/allpages.txt"

echo "$0: INFO: TMPFOLDER: $TMPFOLDER"
echo "$0: INFO: wiki_backup_folder: $wiki_backup_folder"
echo "$0: INFO: wiki_namespace_list: $wiki_namespace_list"
echo "$0: INFO: SOURCE_WIKI_URL: $SOURCE_WIKI_URL"
echo "$0: INFO: wiki_target_api: $wiki_target_api"

## Not required for public wiki.
#./login

for wiki_namespace_item in $wiki_namespace_list ; do
   echo "$0: wiki_namespace_item: $wiki_namespace_item"

   api_continue_or_not=""

   while true ; do
      all_pages=$(curl --fail --silent "${wiki_target_api}?action=query&format=json&list=allpages&aplimit=500&apnamespace=${wiki_namespace_item}&apcontinue=${api_continue_or_not}")

      #echo "$all_pages" | jq -r ".query.allpages[] | {title: .title}| .title"

      echo "$all_pages" | jq -r ".query.allpages[] | .title | @sh" | tee -a "${TMPFOLDER}/allpages.txt" >/dev/null

      if ! api_continue_or_not=$(echo "$all_pages" | jq -r ".continue | .apcontinue") ; then
         break
      fi
      if [ "$api_continue_or_not" = "null" ]; then
         break
      fi
   done
done

test -f "$TMPFOLDER/allpages.txt"
result_test="$(cat "${TMPFOLDER}/allpages.txt")"
if [ "$result_test" = "" ]; then
   echo "$0 ERROR: result_test is empty!"
   exit 1
fi

## site-specific sanity test
## Should be disabled by other users.
# if echo "$result_test" | grep -q "ZeroNet" ; then
#    true "OK"
# else
#    echo "$0 ERROR: See script source code. result_test does not contain ZeroNet!"
#    exit 1
# fi

## Using the same format as git-mediawiki was initially useful during development
## to verify that this script produces the same backup result, i.e. is free of bugs.
## In the future it might allow for more backup restoration options.

while IFS=\n read -r item_from_all_pages ; do
   backup_page_item="$item_from_all_pages"
   ## remove last letter ("'")
   backup_page_item="${backup_page_item::-1}"
   ## remove first letter ("'")
   backup_page_item="${backup_page_item:1}"

   backup_filename_item="$backup_page_item"

   ## Same format as git-mediawiki: replace '/' with '%2F'.
   ## Also the file system does not accept files containing '/'.
   search="/"
   replace="%2F"
   backup_filename_item=$(echo "$backup_filename_item" | str_replace "$search" "$replace")

   ## Same format as git-mediawiki: replace ' ' with '_'.
   ## Replace spaces with underscoore.
   search=" "
   replace="_"
   backup_filename_item=$(echo "$backup_filename_item" | str_replace "$search" "$replace")

   search="'\''"
   replace="'"
   backup_filename_item=$(echo "$backup_filename_item" | str_replace "$search" "$replace")

   ## Same format as git-mediawiki: add '.mw' file extension.
   backup_filename_item="${backup_filename_item}.mw"

   echo "$0: backup_page_item    : $backup_page_item"
   echo "$0: backup_filename_item: $backup_filename_item"

   WIKI_URL="$SOURCE_WIKI_URL" \
      ./fetch \
         "$backup_page_item" | \
         tee "${wiki_backup_folder}/${backup_filename_item}" >/dev/null

   ## Same format as git-mediawiki: add newline at the end.
   echo "" | tee -a "${wiki_backup_folder}/${backup_filename_item}" >/dev/null

done < "${TMPFOLDER}/allpages.txt"
